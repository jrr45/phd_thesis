#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass psuthesis
\options bs,schreyer
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding T1
\font_roman "lmodern" "default"
\font_sans "default" "default"
\font_typewriter "lmodern" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype true
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing other 1.24
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% !TEX root = ../JustinRodriguez-Dissertation.tex
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Appendix
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

Project Unity control software
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Project-Unity"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Figures/Program flow.svg
	width 15.5cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Program flow
\begin_inset CommandInset label
LatexCommand label
name "fig:Program-flow"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
The main program flow.
 User provides the configuration to the initial launchers.
 The configuration gets sent into the queue, un-run configurations can be
 edited by the MultiSequence Execution Manager.
 Generic ND Data collection runs using the configuration, the data is output
 to a file and the Generic Plot Window.
\end_layout

\end_inset


\end_layout

\begin_layout Section

\size footnotesize
Running Unity 
\end_layout

\begin_layout Standard

\size footnotesize
There are several <Measurement Environment> IV launchers for running typical
 lab measurements with the same electronics setups.
 In each launcher the user can select the bias and for a single or multiple
 data points by selecting one of the four tabs: static current, dynamic
 current, static voltage, and dynamic voltage.
 Individual settings throughout the launcher will show additional information
 and suggestions for what values might be appropriate when the mouse is
 hovered over them.
 Static environment parameters allows the user to set the measurement conditions
 before and after the measurement.
 There are check boxes to disable static environments such as gate voltage,
 temperature, field, rotator position, etcetera, so the program may be run
 without any knowledge of those components.
 
\end_layout

\begin_layout Standard

\size footnotesize
Dynamic environment sequences must always run for any of the default launchers.
 The user can create custom launchers by combining dynamic and static environmen
ts in new launchers without having to add new measurement functionality.
 Adding more than one dynamic environment will allow the user to do a sweep
 for each data point in the other environment; the sweeps creating an N-dimensio
nal map of the parameters.
 The sweeps are done in order, so at each point in the first environment
 the second environment sweep runs completely once before the first is changed.
 This is useful if the user wants to do things like vary the gate voltage
 at every temperature to test a FET device quickly.
 
\end_layout

\begin_layout Standard

\size footnotesize
Multiple measurement setups can also be queued, alleviating the need to
 wait for each to finish to hit “run.” If there are multiple measurements
 in the queue, not-yet-run measurements can be edited using the “MultiSequence
 Execution.vi”.
 Once a sequence is started it cannot be edited without aborting and restarting.
 The overall program progress can be monitored on “Generic ND Data Collection.vi”
 while the data can be seen on “Generic Plot Window.vi.” Individual current
 and voltage measurements can be monitored by using “Measure V Source I.vi”
 and “Measure I Source V.vi.” As the dilution fridge is more complicated to
 run, the necessary VI to run and monitor it are included in the Dilution
 Fridge folder.
 
\end_layout

\begin_layout Section

\size footnotesize
Main Program Structure
\end_layout

\begin_layout Standard

\size footnotesize
Project unity aims to take a generic transport measurement configuration,
 then abstract the actual steps to automatically run that measurement.
 Each launcher contains all the settings for a given run, 
\begin_inset Quotes eld
\end_inset

Generic ND data collection.vi
\begin_inset Quotes erd
\end_inset

 runs each measurement sequence, and the data is then plotted in 
\begin_inset Quotes eld
\end_inset

Generic Plot Window.vi
\begin_inset Quotes erd
\end_inset

 and written to the data file.
 All the settings are stored in class files.
 Classes are used in object-oriented programming (OOP) to group data with
 functions that act on that data.
 One of the big advantages to OOP is the ability to create a sub-class of
 an already existing class and inherit all its functions.
 This allows the user to create special classes for each task while still
 retaining all the original functionality or selectively.
 Functions can optionally be overridden in a sub-class so the sub-class
 has its own custom version of a function.
 The program using the sub-class will still be able to just call the original
 function and the appropriate variant of the function will be used.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Program-flow"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the general flow of the program a high-level user perspective.
\end_layout

\begin_layout Subsection
Environments
\end_layout

\begin_layout Standard

\size footnotesize
There are two different sets of environment classes: Static Environments
 and Dynamic Environments.
\end_layout

\begin_layout Subsubsection

\size footnotesize
Static Environments
\end_layout

\begin_layout Standard

\size footnotesize
Static Environments provide the experimental setup before any actual measurement
 will run, should stay constant while the entire experiment is running,
 and setup any environment state needed after all data is done being taken.
 There current Static Environment classes are: Static Environment (base
 class), Static Gate Voltage, Static Magnetic Field, Static PPMS Rotator
 Position, Static Temperature, and Static Utility.
\end_layout

\begin_layout Standard

\size footnotesize
Static Environments all have the following functions (VIs):
\end_layout

\begin_layout Plain Layout
\noindent

\size footnotesize
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features islongtable="true" longtabularalignment="left">
<column alignment="left" valignment="top" width="35text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Vi Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Read Config From File
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Loads all the settings from a file into the class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Write Config To File
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Writes all the settings to a file from the class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Configure Environment 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Configures all the hardware associated with the static environment (PPMS,
 Fridge, …)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set Initial Environment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Returns true/false if the environment should be changed before the measurement
 process begins 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set Final Environment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Returns true/false if the environment should be changed after the measurement
 process finishes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Setup Initial Static Environment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Uses the hardware to set up the environment hardware before the measurement
 process begins
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Setup Final Static Environment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Uses the hardware to set up the environment hardware after the measurement
 process finishes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measurement Names
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The column name(s) for any data taken.
 E.g.
 Temperature (K) for monitoring the temperature data 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Signal the hardware to record any data associated with the static environment
 and return it
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection

\size footnotesize
Dynamic Environments
\end_layout

\begin_layout Standard

\size footnotesize
Dynamic Environments change the environment over the course of a measurement.
 There current Static Environment classes are: Dynamic Environment (base
 class), Dynamic Current, Dynamic Gate Voltage, Dynamic Magnetic Field,
 Dynamic PPMS Rotator Position, Dynamic Sequence, Dynamic Temperature, Dynamic
 Time, Dynamic Voltage.
 The Dynamic Sequence class can be used to chain multiple Dynamic Environments
 to execute one after another in a sequence, this is different from chaining
 launchers which is explained later.
 
\end_layout

\begin_layout Standard

\size footnotesize
Dynamic Environments all have the following functions (VIs):
\end_layout

\begin_layout Standard
\noindent
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="2">
<features islongtable="true" longtabularalignment="left">
<column alignment="left" valignment="top" width="35text%">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Vi name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Read Config From File
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Loads all the settings from a file into the class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Write Config To File
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Writes all the class settings to a file
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Read/Write Current Step N
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Gets/sets the current step counter of the environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Increment N
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Increments the step counter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Read/Write Number of Steps
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Gets/sets the total number of steps the environment should take
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Configure environment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Configures all the hardware associated with the static environment (PPMS,
 Fridge, voltmeters, …)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Check if finished
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Returns true if the environment is finished taking all data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Cleanup
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Run after measurement finishes to make sure hardware is in a safe state
 (e.g.
 no current on)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Get Next Step Text
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Get the text to display to the user to let them know what the measurement
 is doing and monitor progress
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Get Static Environment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Produces a static state configuration to measure a single data point
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Setup Step 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Sets the hardware to the desired state before data is measured
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measurement Names
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
The column name(s) for any data taken.
 E.g.
 Temperature for monitoring the temperature as data is taken
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Measure Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Record any data associated with the dynamic environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set Write To File 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size footnotesize
Set this to false to avoid generating a new file name when the writing to
 file (this is a bit of a hack) 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\size footnotesize
Stand alone classes
\end_layout

\begin_layout Standard

\size footnotesize
There is one stand alone class that is worth mentioning that is not considered
 an environment.
 System information – this is a helper class that contains all the information
 for cryogenic hardware configurations (PPMS, Fridge, He3, Dip).
\end_layout

\begin_layout Subsection

\size footnotesize
Main Algorithm
\end_layout

\begin_layout Standard

\size footnotesize
For any measurement run the “Generic ND Data Collection.vi” takes in an array
 of Static Environments, array of Dynamic Environments, and System Information,
 and file info.
 The “Generic ND Data Collection.vi” then does the following:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Enumerate

\size footnotesize
Configures all hardware, launches Generic Plot Window, sets starting parameters
\end_layout

\begin_layout Enumerate

\size footnotesize
Sets up the Static Environment(s) in the array in the order given 
\end_layout

\begin_deeper
\begin_layout Enumerate

\size footnotesize
Checks each to see if the initial environment should be set
\end_layout

\begin_layout Enumerate

\size footnotesize
Displays the setup text to the user 
\end_layout

\begin_layout Enumerate

\size footnotesize
Sets the hardware for the initial environment 
\end_layout

\end_deeper
\begin_layout Enumerate

\size footnotesize
For each Dynamic environment in the array
\end_layout

\begin_deeper
\begin_layout Enumerate

\size footnotesize
Sets up step X of the current Dynamic Environment 
\end_layout

\begin_layout Enumerate

\size footnotesize
Measures data for the all dynamic environments, all static environments,
 and system 
\end_layout

\begin_layout Enumerate

\size footnotesize
Writes all data to the data file 
\end_layout

\begin_layout Enumerate

\size footnotesize
Increments the counter of the last Dynamic Environment, check to see if
 finished 
\end_layout

\begin_deeper
\begin_layout Itemize

\size footnotesize
If finished increment second to last dynamic environment and reset own counter
 to 0
\end_layout

\begin_layout Itemize

\size footnotesize
Continues down the chain until one is not finished and can just be incremented
 by 1 or all are done 
\end_layout

\end_deeper
\begin_layout Enumerate

\size footnotesize
If all environments are not finished go to (a), otherwise continue 
\end_layout

\end_deeper
\begin_layout Enumerate

\size footnotesize
Cleanup all Dynamic Environment hardware (e.g.
 turn off current) 
\end_layout

\begin_layout Enumerate

\size footnotesize
Sets up the Static Environment(s) in the array in the order given to their
 ‘final’ configuration 
\end_layout

\begin_layout Enumerate

\size footnotesize
Cleanup any system hardware 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Main algorithm for Project Unity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
The dynamic environment execution sequence is a bit complicated to allow
 them to be interleaved.
 For example, take Temperature, Magnetic Field, then Current environments
 in an array.
 For each Temperature point, the program would sweep the entire magnetic
 field first before incrementing one temperature step, and for each magnetic
 field point within that magnetic sweep a current sweep would run from start
 to finish.
 This lets us set up a single launcher and run a long 3D measurement (temperatur
e, magnetic field, current: vs voltage).
 For most of the launchers, they offer a static current/voltage configuration
 which is just translated into a dynamic current/voltage with only a single
 data point.
 “Set Write To File.vi” is used to prevent each data point producing a separate
 file in this case.
 
\end_layout

\begin_layout Section

\size footnotesize
File format (Parameters to/from File)
\end_layout

\begin_layout Standard

\size footnotesize
Each data file contains all the settings for an individual run before the
 data, so both are kept together.
 The parameter information is stored in the INI format because it is one
 of the few file formats LabVIEW natively supports.
 Data is appended immediately after that in tab separated columns (CSV format)
 with the first row containing all the measurement names from the dynamic
 and static environment classes.
 The parameters VIs (functions) can both read and write to files to keep
 the logic together and consistent.
 
\end_layout

\begin_layout Section

\size footnotesize
Hardware (System Specific Subprograms)
\end_layout

\begin_layout Standard

\size footnotesize
In an effort to be able to run everything on new equipment without having
 to fork the program, the hardware interfaces have been separated out and
 abstracted away as much as possible.
 The sub-folders contain specific functions written for each piece of hardware,
 to impose some form of organization and reduce clutter.
 The main cryostat hardware interfaces contain VIs for reading/setting magnetic
 fields, temperature, gate voltage, and PPMS rotator positions.
 Each contains the code for specific platforms under case structures so
 each machine can individually edited or new ones can be added.
 
\end_layout

\begin_layout Section

\size footnotesize
2D DC Subprograms (Sourcing and Measuring)
\end_layout

\begin_layout Standard

\size footnotesize
This section contains the VIs responsible for configuration, management,
 bias setup, and measurement of current and voltage sources and meters.
 It makes use of the system specific subprograms for individual helper functions
 but is largely designed to abstract away each specific action so each meter
 and source can be run without worrying about the programming quirks of
 each device.
 The main program (Generic ND Data Collection.vi) will start by calling the
 configure voltage and source VIs for each piece of electronic hardware
 it will use.
 These VIs will call a several system specific VIs to ensure the hardware
 is in a consistent expected state for each run.
 
\end_layout

\begin_layout Standard

\size footnotesize
Sourcing a bias and measuring are handled by a similar set of VIs that seek
 to provide a consistent way of measuring and sourcing current and voltage
 across devices.
 The main 2 VIs that work with all of these are “Source I Measure V.vi” and
 “Source V Measure I.vi.” These handle the source and measurement timing,
 as well as flip, subtract bias, and static modes.
 They also display the data as it is taken so the user can monitor how the
 individual measurements are doing.
 
\end_layout

\begin_layout Section

\size footnotesize
Queueing measurements
\end_layout

\begin_layout Standard

\size footnotesize
When each launcher runs a measurement it calls “Add to Execution queue.vi.”
 This VI adds the environment arrays to a queue and starts an asynchronous
 call to “Generic ND Data Collection.vi.” “Generic ND Data Collection.vi” will
 then take the environment arrays out of the queue in order of when they
 were added.
 This queue structure allows more than one measurement to be set without
 the need to wait for the first to finish.
 “MultiSequence Execution.vi” can edit and rearrange the queue.
 Any VI that touches the queue should first have acquired the semaphore
 “ExecutionQueue.” This prevents more than one VI from changing things at
 the same time and introducing a race condition.
 
\end_layout

\end_body
\end_document
